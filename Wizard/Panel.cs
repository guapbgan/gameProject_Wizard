using System.Drawing;
using System.IO;
using System.Windows.Forms;

namespace Wizard
{
    class Panel
    {
        public PictureBox[,] pixelList { get; }
        bool startDraw = false;
        int ori_x ;
        int ori_y ;
        int pixelEdgeSize = 25;
        int pixelEdgeNum = 20;

        public int[,] patternA = new int[,] {   { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0},
                                                    { 0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0},
                                                    { 0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

        public int[,] patternD = new int[,] {   { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
                                                    { 0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
                                                    { 0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
                                                    { 0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0},
                                                    { 0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
                                                    { 0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
                                                    { 0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
                                                    { 0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0},
                                                    { 0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
                                                    { 0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
                                                    { 0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

        public int[,] patternH = new int[,] {   { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
                                                    { 0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
                                                    { 0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
                                                    { 0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
                                                    { 0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0},
                                                    { 0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
                                                    { 0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
                                                    { 0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
                                                    { 0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
                                                    { 0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

        public int[,] patternP = new int[,] {   { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
                                                    { 0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
                                                    { 0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0},
                                                    { 0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0},
                                                    { 0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
                                                    { 0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
                                                    { 0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
                                                    { 0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};

        public int[,] patternM = new int[,] {   { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0},
                                                    { 0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0},
                                                    { 0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0},
                                                    { 0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
                                                    { 0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0},
                                                    { 0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0},
                                                    { 0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                                                    { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
        public int[,] patternR
        {
            get
            {
                int[,] pattern = new int[pixelEdgeNum, pixelEdgeNum];
                for (int i = 0; i < pixelEdgeNum; i++)
                {
                    for (int j = 0; j < pixelEdgeNum; j++)
                    {
                        if (i == pixelEdgeNum - 1 || j == pixelEdgeNum - 1 || i == 0 || j == 0)
                        {
                            pattern[i, j] = 1;
                        }
                    }
                }
                return pattern;
            }
        }
        public int dataSize { get { return pixelEdgeNum * pixelEdgeNum; } }
        
        public Panel(Form form, int ori_x,int ori_y)
        {
            void Draw(object sender, MouseEventArgs e)
            {
                if (startDraw == true && ((PictureBox)sender).BackColor == Color.Transparent)
                {
                    ((PictureBox)sender).BackColor = Color.Red;
                }
            }
            void Start(object sender, MouseEventArgs e)
            {
                if (e.Button == MouseButtons.Left && startDraw == false)
                {
                    startDraw = true;
                }
                else
                {
                    startDraw = false;
                }
            }
            pixelList = new PictureBox[pixelEdgeNum, pixelEdgeNum];

            for (int i = 0; i < pixelEdgeNum; i++)
            {
                for (int j = 0; j < pixelEdgeNum; j++)
                {
                    pixelList[i, j] = new PictureBox()
                    {
                        Width = pixelEdgeSize,
                        Height = pixelEdgeSize,
                        BackColor = Color.Transparent,
                        Location = new Point(ori_x + pixelEdgeSize * j, ori_y + pixelEdgeSize * i)
                    };
                    pixelList[i, j].MouseMove += Draw;
                    pixelList[i, j].MouseDown += Start;
                }
            }
            foreach (PictureBox obj in pixelList)
            {
                form.Controls.Add(obj);
            }
            Initialize();
        }
        public void Initialize()
        {
            foreach (PictureBox obj in pixelList)
            {
                obj.BackColor = Color.Transparent;
                obj.Enabled = true;
            }
            SetPattern(patternR, Color.Blue);

        }
        public float[,] Read()
        {
            int count = 0;
            float[,] data = new float[1, pixelEdgeNum * pixelEdgeNum];
            foreach (PictureBox obj in pixelList)
            {
                if (obj.BackColor != Color.Transparent)
                    data[0, count] = 0.05f;
                else
                    data[0, count] = 0.95f;
                count++;
            }
            return data;

        }

        public void SetPattern(int[,] pattern, Color color)
        {

            for (int i = 0; i < pattern.GetLength(0); i++)
            {
                for (int j = 0; j < pattern.GetLength(1); j++)
                {
                    if (pattern[i, j] == 1)
                    {
                        pixelList[i, j].BackColor = color;
                    }
                }
            }
        }
        public void SaveData(float[,] y, float[,] x, string filename)
        {
            StreamWriter sw;
            FileInfo finfo = new FileInfo(filename);
            if (!finfo.Exists)
                sw = finfo.CreateText();
            else
                sw = finfo.AppendText();
            if (!Directory.Exists(finfo.DirectoryName))
            {
                Directory.CreateDirectory(finfo.DirectoryName);
            }
            for (int i = 0; i < y.GetLength(0); i++)
            {
                sw.Write(y[i, 0].ToString());
                sw.Write(",");
            }
            for (int i = 0; i < x.GetLength(1); i++)
            {
                sw.Write(x[0, i].ToString());
                if (i != x.GetLength(1) - 1)
                {
                    sw.Write(",");
                }
                else
                    sw.WriteLine("");
            }
            sw.Flush();
            sw.Close();
        }
        public void Disable()
        {
            foreach(PictureBox obj in pixelList)
            {
                obj.BackColor = Color.Black;
                obj.Enabled = false;
            }
        }
    }

}
